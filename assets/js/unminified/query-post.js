(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

/**
 * Because Elementor plugin uses jQuery for controls,
 * We also have to use jQuery to create new one
 */
jQuery(document).ready(function () {
  jQuery(window).on("elementor:init", function () {
    var ControlQueryPostSearch = elementor.modules.controls.BaseData.extend({
      isPostSearchReady: false,
      getPostTitlesbyID: function getPostTitlesbyID() {
        var self = this;
        var postIDs = this.getControlValue();

        if (!postIDs) {
          return;
        }

        if (!_.isArray(postIDs)) {
          postIDs = [postIDs];
        }

        self.addControlSpinner();
        /**
         * Because Elementor plugin uses jQuery for controls,
         * We also have to use jQuery to create new one
         */

        jQuery.ajax({
          url: ajaxurl,
          type: "POST",
          data: {
            action: "zeus_get_posts_title_by_id",
            nonce: queryPostData.nonce,
            id: postIDs
          },
          success: function success(results) {
            console.log(results);
            self.isPostSearchReady = true;
            self.model.set("options", results);
            self.render();
          }
        });
      },
      addControlSpinner: function addControlSpinner() {
        this.ui.select.prop("disabled", true);
        this.$el.find(".elementor-control-title").after('<span class="elementor-control-spinner">&nbsp;<i class="eicon-spinner eicon-animation-spin"></i>&nbsp;</span>');
      },
      onReady: function onReady() {
        var self = this;
        this.ui.select.select2({
          placeholder: "Search",
          allowClear: true,
          minimumInputLength: 2,
          ajax: {
            url: ajaxurl,
            dataType: "json",
            method: "post",
            delay: 250,
            data: function data(params) {
              return {
                action: "zeus_get_posts_by_query",
                nonce: queryPostData.nonce,
                q: params.term,
                // search term
                post_type: self.model.get("post_type")
              };
            },
            processResults: function processResults(data) {
              return {
                results: data
              };
            },
            cache: true
          }
        });

        if (!this.isPostSearchReady) {
          this.getPostTitlesbyID();
        }
      },
      onBeforeDestroy: function onBeforeDestroy() {
        if (this.ui.select.data("select2")) {
          this.ui.select.select2("destroy");
        }

        this.$el.remove();
      }
    });
    elementor.addControlView("zeus-query-posts", ControlQueryPostSearch);
  });
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
